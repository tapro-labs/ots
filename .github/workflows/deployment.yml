name: App Build
on:
  push:
    branches:
      - 'main'
    paths:
      - 'frontend/**'
      - 'backend/**'

  workflow_dispatch:
    inputs:
      force_build_frontend:
        description: 'Force Build Frontend'
        required: true
        type: boolean
      force_build_backend:
        description: 'Force Build Backend'
        required: true
        type: boolean

jobs:
  # JOB to run change detection
  changes:
    if: ${{ inputs.force_build_frontend == false && inputs.force_build_backend == false }}
    runs-on: ubuntu-latest
    outputs:
      backend: ${{ steps.filter.outputs.backend }}
      frontend: ${{ steps.filter.outputs.frontend }}
    steps:
      - uses: actions/checkout@v3
      - uses: dorny/paths-filter@4512585405083f25c027a35db413c2b3b9006d50
        id: filter
        with:
          filters: |
            backend:
              - 'backend/**'
            frontend:
              - 'frontend/**'

  build_frontend:
    needs: changes
    if: |
      always() &&
      needs.changes.outputs.frontend == 'true' ||
      inputs.force_build_frontend == true
    runs-on: ubuntu-20.04
    defaults:
      run:
        working-directory: ./frontend
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 14.20.0
          cache: 'yarn'
      - name: Install dependencies
        run: yarn --frozen-lockfile
      - name: Build app
        run: cp .env.example .env && yarn build
      - name: Archive dist folder
        uses: actions/upload-artifact@v3
        with:
          name: frontend-build
          path: ${{ github.workspace }}/frontend/dist/
          if-no-files-found: error
          retention-days: 1

  build_backend:
    needs: changes
    if: |
      always() &&
      needs.changes.outputs.backend == 'true' ||
      inputs.force_build_backend == true
    runs-on: ubuntu-20.04
    defaults:
      run:
        working-directory: ./backend
    steps:
      - uses: actions/checkout@v3
      - uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      - name: Install rust version
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: 1.65
          override: true
      - name: Compute short github commit hash
        run: echo "GITHUB_SHORT_SHA=`echo ${GITHUB_SHA} | cut -c1-7`" >> $GITHUB_ENV
      - name: Build project
        run: make build
        env:
          ROCKET_PROFILE: release
          OTS_BUILD_VERSION: ${{ env.GITHUB_SHORT_SHA }}
          ENABLED_FEATURES: ${{ secrets.ENABLED_FEATURES }}
      - name: Archive binary
        uses: actions/upload-artifact@v3
        with:
          name: backend-build
          path: ${{ github.workspace }}/backend/target/release/ots_server
          if-no-files-found: error
          retention-days: 1

  deploy:
    runs-on: ubuntu-20.04
    needs: [changes, build_backend, build_frontend]
    if: |
      always() &&
      (needs.changes.outputs.frontend == 'true' || needs.changes.outputs.backend == 'true' ||
      inputs.force_build_frontend == true || inputs.force_build_backend == true) &&
      !contains(needs.*.result, 'cancelled') &&
      !contains(needs.*.result, 'failure')
    env:
      DEPLOYMENT_NAMESPACE: ots
      DOCKER_IMAGE_PREFIX: eu.gcr.io/tapro-labs/ots
      DOCKER_BACKEND_IMAGE: eu.gcr.io/tapro-labs/ots/ots-backend
      DOCKER_FRONTEND_IMAGE: eu.gcr.io/tapro-labs/ots/ots-frontend
      DOCKER_TAG_NAME: ots-deployment-${{ github.run_number }}
      FRONTEND_CHANGED: ${{ needs.changes.outputs.frontend == 'true' || inputs.force_build_frontend == true }}
      BACKEND_CHANGED: ${{ needs.changes.outputs.backend == 'true' || inputs.force_build_backend == true }}
    steps:
      - uses: actions/checkout@v3

      - name: 'Authenticate Cloud'
        uses: 'google-github-actions/auth@v1'
        with:
          credentials_json: ${{ secrets.GCLOUD_CREDENTIAL_FILE }}

      - name: 'Set up Cloud SDK'
        uses: 'google-github-actions/setup-gcloud@v1'

      - name: 'Use gcloud CLI'
        run: 'gcloud config set project ${{ secrets.PROJECT_ID }} && gcloud auth configure-docker'

      - name: 'Set k8s cluster config'
        run: |
          kubectl config set-cluster taprolabs_cluster --server=${{ secrets.K8S_SERVER_URL }}
          kubectl config set-context taprolabs_context --cluster=taprolabs_cluster
          kubectl config set-credentials github_deployer --token=${{ secrets.K8S_DEPLOYER_ACCOUNT_TOKEN }}
          kubectl config set-context taprolabs_context --user=github_deployer
          kubectl config set clusters.taprolabs_cluster.certificate-authority-data "${{ secrets.K8S_SERVER_CA }}"
          kubectl config use-context taprolabs_context

      - name: 'Download backend artifact'
        if: ${{ env.BACKEND_CHANGED == 'true' }}
        uses: actions/download-artifact@v3
        with:
          name: backend-build
          path: ./backend/target/release/ # ots_server executable will be put under release

      - name: 'Download frontend artifact'
        if: ${{ env.FRONTEND_CHANGED == 'true' }}
        uses: actions/download-artifact@v3
        with:
          name: frontend-build
          path: ./frontend/dist/

      - name: 'Build backend docker image'
        if: ${{ env.BACKEND_CHANGED == 'true' }}
        run: docker build -f Dockerfile.backend -t ${{ env.DOCKER_BACKEND_IMAGE }}:production .

      - name: 'Pull latest backend production image if backend was not built'
        if: ${{ env.BACKEND_CHANGED == 'false' }}
        run: docker pull ${{ env.DOCKER_BACKEND_IMAGE }}:production

      - name: 'Build frontend docker image'
        if: ${{ env.FRONTEND_CHANGED == 'true' }}
        run: docker build -f Dockerfile.frontend -t ${{ env.DOCKER_FRONTEND_IMAGE }}:production .

      - name: 'Pull latest frontend production image if frontend was not built'
        if: ${{ env.FRONTEND_CHANGED == 'false' }}
        run: docker pull ${{ env.DOCKER_FRONTEND_IMAGE }}:production

      - name: 'Tag and push backend docker image'
        run: |
          docker tag ${{ env.DOCKER_BACKEND_IMAGE }}:production ${{ env.DOCKER_BACKEND_IMAGE }}:${{ env.DOCKER_TAG_NAME }}
          docker push ${{ env.DOCKER_BACKEND_IMAGE }}:production
          docker push ${{ env.DOCKER_BACKEND_IMAGE }}:${{ env.DOCKER_TAG_NAME }}

      - name: 'Tag and push frontend docker image'
        run: |
          docker tag ${{ env.DOCKER_FRONTEND_IMAGE }}:production ${{ env.DOCKER_FRONTEND_IMAGE }}:${{ env.DOCKER_TAG_NAME }}
          docker push ${{ env.DOCKER_FRONTEND_IMAGE }}:production
          docker push ${{ env.DOCKER_FRONTEND_IMAGE }}:${{ env.DOCKER_TAG_NAME }}

      - name: 'Deploy'
        run: |
          kubectl set image deployment/ots-backend -n ${{ env.DEPLOYMENT_NAMESPACE }} ots-backend=${{ env.DOCKER_BACKEND_IMAGE }}:${{ env.DOCKER_TAG_NAME }}
          kubectl set image deployment/ots-frontend -n ${{ env.DEPLOYMENT_NAMESPACE }} ots-frontend=${{ env.DOCKER_FRONTEND_IMAGE }}:${{ env.DOCKER_TAG_NAME }}
